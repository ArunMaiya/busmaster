<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" []>
<topic id="com_interface_application" xml:lang="en-us">
  <title>BUSMASTER COM interface</title>
  <prolog>
    <author>Ratnadip Choudhury</author>
    <copyright>
      <copyryear year="2011"/>
      <copyrholder>ROBERT BOSCH ENGINEERING AND BUSINESS SOLUTIONS LIMITED</copyrholder>
    </copyright>
    <metadata>
      <keywords>
        <indexterm>BUSMASTER COM interface</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>Using BUSMASTER Automation Object:</p>
    <p>User can use all the APIs exposed by BUSMASTER, as COM interface functions in his own application by following ways:</p>
    <p>FROM VB:</p>
    <p>If the client application is developed using VB the steps are:<ol>
        <li>Project-&gt;Add Reference ie. <image href="../images/Reference.bmp" placement="break"/></li>
        <li>Select the CAN_Monitor 1.0 Type Library<image href="../images/TypeLib.bmp" placement="break"/></li>
      </ol></p>
    <p>Now all the BUSMASTER COM APIs can be used in the client application.Once the VB project is configured to use CAN_Monitor type library, a global variable is needed to be declared and initialised so that the COM server can be accessed.This can be accomplished using following statement:</p>
    <codeblock>Dim gBUSMASTERApp As CAN_MonitorApp.Application
Set gBUSMASTERApp  = New CAN_MonitorApp.Application</codeblock>
    <p>Now the varible gBUSMASTERApp can be used to access all the COM members.</p>
    <example>For connecting the tool following code is required:<codeblock>gBUSMASTERApp  .Connect 1</codeblock></example>
    <p>From C++</p>
    <p>Let&apos;s start with a very simple C++ application. Make a simple dialog-based application with the class wizard, be it an MFC or an ATL/WTL application. Just make sure that :CoInitialize() and CoUninitialize() are called somewhere (that is done automatically in ATL applications). Put a button on the dialog somewhere, wire it up, and put the following in the message handler for the BN_CLICKED handler:</p>
    <codeblock>HResult hr;
hr = ::CoCreateInstance(CLSID_Application, NULL, CLSCTX_LOCAL_SERVER, IID_IApplication, (void**)&amp;m_IApplication);
if(SUCCEEDED(hr))
  if (m_IApplication) {
    m_IApplication-&gt;Connect ( 1 );
  }
}</codeblock>
    <p>In the header for the dialog, declare a member like this:</p>
    <codeblock>IApplication* m_IApplication;</codeblock>
    <p>Now, all you need to do is include the file CAN_Monitor_Interface.h which is provided in the BUSMASTER installation folder.When you go looking for this file, you&apos;ll notice another file:  CAN_Monitor_Interface.c. This file contains the implementation of the interface and is needed by the linker. So, again, you can copy it, or add it to your project directly.</p>
    <p>Now, build your application, click the button you&apos;ve made, and - there is your application!

 
</p>
    <p>

</p>
    <p>


To receive CAN messages from Busmaster makes use of the new interface_IAppEvents (connection points).</p>
    <p>Provide implementation to sink class as shown below.</p>
    <p><codeblock>Sink Class declaration:

VC++:

class ClientSink : public _IAppEvents
{
private:
DWORD       m_dwRefCount;
public:
ClientSink();
virtual ~ClientSink();

STDMETHODIMP OnMessageReceived(CAN_MSGS RxMsg);

HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, void **ppvObject);

ULONG STDMETHODCALLTYPE AddRef();

ULONG STDMETHODCALLTYPE Release();
};

C#:

class MyEventsSink : _IAppEvents
{
    public MyEventsSink() { }

    void _IAppEvents.OnMessageReceived(CAN_MSGS RxMsg)
    {
        MessageBox.Show(&quot;Rx Packet Received!&quot;);        
    }
}



Usage:

VC++:

            HRESULT hResult = CoCreateInstance(CLSID_Application, NULL, 
                   CLSCTX_LOCAL_SERVER, IID_IApplication, (void **) &amp;pICANvas);
            if ((SUCCEEDED(hResult)) &amp;&amp; (NULL != pICANvas))
            {
//check if this interface supports connectible objects
HRESULT hr = pICANvas-&gt;QueryInterface(IID_IConnectionPointContainer,(void **)&amp;m_pConnPtContainer);
if ( !SUCCEEDED(hr) )
{
return hr;
}

// find the specific connection point
hr = m_pConnPtContainer-&gt;FindConnectionPoint(IID__IAppEvents, &amp;m_pCntPoint);
if ( !SUCCEEDED(hr) )
{
return hr;
}

//we are done with the connection point container interface
m_pConnPtContainer-&gt;Release();

m_pSink = new ClientSink;
if ( NULL == m_pSink )
{
  return E_FAIL;
}

//Get the pointer to CSink&apos;s IUnknown pointer
hr = m_pSink-&gt;QueryInterface (IID_IUnknown,(void **)&amp;m_pSinkUnk);
if ( !SUCCEEDED(hr) )
{
return hr;
}

// It is assumed that this should call the QueryInterface with _IAppEvents
// Do not understand why this calls the QueryInterface with IID_IMarshal
// Later this becomes reason for not getting event at ClientSink::OnMessageReceived
hr = m_pCntPoint-&gt;Advise(m_pSinkUnk, &amp;m_dwAdvise);
if ( !SUCCEEDED(hr) )
{
return hr;
}

                UpdateGUI();
            }
            else
            {
                ASSERT(FALSE);
            }


C#:

            int cookie;
            MyEventsSink mySink;
            mySink = new MyEventsSink();

            UCOMIConnectionPointContainer icpc = (UCOMIConnectionPointContainer)canMonitor;
            UCOMIConnectionPoint icp;
            Guid IID_IAppEvents = typeof(_IAppEvents).GUID;

            icpc.FindConnectionPoint(ref IID_IAppEvents, out icp);
            icp.Advise(mySink, out cookie);

            canMonitor.Connect(1);
            CAN_MonitorApp.CAN_MSGS sMsg = new CAN_MonitorApp.CAN_MSGS();
            // Initialise message structure
            sMsg.m_unMsgID = 100;              // Message ID
            sMsg.m_bEXTENDED = 0;           // Standard Message type
            sMsg.m_bRTR = 0;                // Not RTR type
            sMsg.m_ucDataLen = 8;                    // Length is 8 Bytes
            sMsg.m_ucData = new Byte[8] { 0, 1, 2, 3, 4, 5, 6, 7 };  // Lower 4 Bytes
            sMsg.m_ucChannel = 1;                // First CAN channel

            // Send the message
            canMonitor.SendCANMSg(ref sMsg);
            //canMonitor.

            Thread.Sleep(5000);

            icp.Unadvise(cookie);</codeblock></p>
  </body>
</topic>
